module App.Arguments (execArgParser) where

import Options.Applicative
import StaticLS.StaticEnv.Options
import System.Environment
import System.Exit

data PrgOptions = PrgOptions
    { staticEnvOpts :: StaticEnvOptions
    , showHelp :: Bool
    }

{- | Run an argument parser but suppress invalid arguments (simply running the server instead)
Helpful for people on emacs or whose default configurations from HLS pass in
unsupported arguments to static-ls
-}
execArgParser :: IO StaticEnvOptions
execArgParser =
    getArgs >>= handleParseResultWithSuppression . execParserPure defaultPrefs progParseInfo
  where
    handleParseResultWithSuppression :: ParserResult PrgOptions -> IO StaticEnvOptions
    handleParseResultWithSuppression (Success (PrgOptions{showHelp = True})) =
        -- Get the help text (optparse-applicative usually shows the help text on error)
        handleParseResult . Failure $
            parserFailure defaultPrefs progParseInfo (ShowHelpText Nothing) mempty
    handleParseResultWithSuppression (Success a) = return a.staticEnvOpts
    -- Ignore if invalid arguments are input
    handleParseResultWithSuppression (Failure _) = return defaultStaticEnvOptions
    handleParseResultWithSuppression (CompletionInvoked compl) = do
        progn <- getProgName
        msg <- execCompletion compl progn
        putStr msg
        exitSuccess

progParseInfo :: ParserInfo PrgOptions
progParseInfo =
    info
        (argParser <**> helper)
        ( fullDesc
            <> progDesc "Run static-ls as a language server for a client to talk to"
            <> header "static-ls - a lightweight language server for haskell"
        )

argParser :: Parser PrgOptions
argParser =
    PrgOptions
        <$> staticEnvOptParser
        <*> flag
            False
            True
            ( long "help"
                <> short 'h'
            )

staticEnvOptParser :: Parser StaticEnvOptions
staticEnvOptParser =
    StaticEnvOptions
        <$> strOption
            ( long "hiedb"
                <> metavar "TARGET"
                <> value defaultHieDb
                <> help "Path to hiedb file produced by hiedb indexing hiefiles"
                <> showDefault
            )
        <*> strOption
            ( long "hiefiles"
                <> metavar "TARGET"
                <> value defaultHieFiles
                <> help "Path to hiefiles generated by -fwrite-ide-info"
                <> showDefault
            )
